generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// NextAuth core models
model User {
  id             String   @id @default(cuid())
  name           String?
  email          String?  @unique
  emailVerified  DateTime?
  image          String?
  password       String?
  accounts       Account[]
  sessions       Session[]
  calculations   Calculation[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id            String   @id @default(cuid())
  sessionToken  String   @unique
  userId        String
  expires       DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// App domain models
model Calculation {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Owner
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Basic info
  qualityName String
  
  // Main parameters
  totalCard    Float
  pickOnLooms  Float
  pano         Float
  
  // Extra info
  wastagePercent   Float  @default(2)
  jobCharge        Float  @default(0.35)
  rebatePercent    Float  @default(2)
  salesRate        Float  @default(335)
  brokeragePercent Float  @default(0)
  
  // Related data
  weftFeeders WeftFeeder[]
  warpYarns   WarpYarn[]
  
  @@map("calculations")
}

model WeftFeeder {
  id             String      @id @default(cuid())
  calculationId  String
  calculation    Calculation @relation(fields: [calculationId], references: [id], onDelete: Cascade)
  
  feederName     String
  yarnName       String
  card           Float
  denier         Float
  rate           Float
  wastagePercent Float       @default(10)
  sortOrder      Int         // To maintain order of feeders
  
  @@map("weft_feeders")
}

model WarpYarn {
  id            String      @id @default(cuid())
  calculationId String
  calculation   Calculation @relation(fields: [calculationId], references: [id], onDelete: Cascade)
  
  yarnName  String
  tar       Float
  denier    Float
  rate      Float
  sortOrder Int    // To maintain order of yarns
  
  @@map("warp_yarns")
}
